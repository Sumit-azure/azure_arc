#!meta

{"kernelInfo":{"defaultKernelName":"pwsh","items":[{"aliases":[],"languageName":"pwsh","name":"pwsh"}]}}

#!markdown

# Azure Arc-enabled servers LevelUp Training

## Goals

The purpose of this workshop is to train Microsoft employees who are working in the field with the Azure Arc-enabled server concepts, features, value proposition, and do hands on training to help customers deploy Azure Arc-enabled servers.

After completion of this workshop, you will be able to:

- Understand pre-requisites to onboard Windows and Linux servers to Azure Arc
- Onboard Windows and Linux servers running using different onboarding methods
- Monitor your Azure Arc-enabled servers using Azure Monitor
- Enroll your Windows Server 2012/R2 or SQL Server 2012 machines for Extended Security Updates through Azure Arc
- Secure your Azure Arc-enabled servers using Microsoft Defender for servers
- Gain security insights from your Arc-enabled servers using Microsoft Sentinel
- Enforce governance across your Azure Arc-enabled servers using Azure Policy
- Manage the Windows operating system of your Arc-enabled servers using Windows Admin Center (Preview)
- Query and inventory your Azure Arc-enabled servers using Azure Resource Graph
- Monitor changes to your Azure Arc-enabled servers using Change tracking and inventory
- Keep your Azure Arc-enabled servers patched using Azure Update Manager
- SSH into your Azure Arc-enabled servers using SSH access
- Run scripts in your Arc-enabled Windows server by using Run Commands
- Run automation runbooks on your Azure Arc-enabled servers using Hybrid runbook workers
- Configure your Azure Arc-enabled servers using Azure Automanage machine configuration

| LevelUp Module | Duration | Facilitator |
|---------------|---------------|---------------|
|**Understand pre-requisites to onboard Windows and Linux servers to Azure Arc** | x minutes | Seif Bassem |
|**Onboard Windows and Linux servers running using different onboarding methods** | x minutes | Basim Majeed |
|**Monitor your Azure Arc-enabled servers using Azure Monitor** | x minutes | Basim Majeed |
|**Enroll your Windows Server 2012/R2 or SQL Server 2012 machines for Extended Security Updates through Azure Arc** | x minutes | Alexander Ortha/Aurnov Chattopadhyay|
|**Secure your Azure Arc-enabled servers using Microsoft Defender for servers** | x minutes | Seif Bassem |
|**Gain security insights from your Arc-enabled servers using Microsoft Sentinel** | x minutes | Seif Bassem |
|**Enforce governance across your Azure Arc-enabled servers using Azure Policy** | x minutes | Basim Majeed |
|**Manage the Windows operating system of your Arc-enabled servers using Windows Admin Center (Preview)** | x minutes | Basim Majeed |
|**Query and inventory your Azure Arc-enabled servers using Azure Resource Graph** | x minutes | Basim Majeed |
|**Monitor changes to your Azure Arc-enabled servers using Change tracking and inventory** | x minutes | Lloyd Lim |
|**Keep your Azure Arc-enabled servers patched using Azure Update Manager** | x minutes | Lloyd Lim |
|**SSH into your Azure Arc-enabled servers using SSH access** | x minutes | Jan Egil Ring |
|**Run scripts in your Arc-enabled Windows server by using Run Commands** | x minutes | Jan Egil Ring |
|**Run automation runbooks on your Azure Arc-enabled servers using Hybrid runbook workers** | x minutes | Jan Egil Ring |
|**Configure your Azure Arc-enabled servers using Azure Automanage machine configuration** | x minutes | Jan Egil Ring |

## LevelUp Lab Environment

ArcBox LevelUp edition is a special “flavor” of ArcBox that is intended for users who want to experience Azure Arc-enabled servers' capabilities in a sandbox environment. Screenshot below shows layout of the lab environment.

  ![Screenshot showing ArcBox architecture](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/ArcBox-architecture.png)

### Prerequisites

- [Install or update Azure CLI to version 2.51.0 and above](https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest). Use the below command to check your current installed version.

#!pwsh

az --version

#!markdown

   ![Screenshot showing azure cli version](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/azcli_version.png)

- Login to AZ CLI using the ```az login``` command.

#!pwsh

az login

#!markdown

- Set the default subscription using Azure CLI.

```shell
$subscriptionId = "<Subscription Id>"
az account set -s $subscriptionId
```

#!pwsh

$subscriptionId = "<Subscription Id>"
az account set -s $subscriptionId

#!markdown

Login to Azure PowerShell the ```Connect-AzAccount``` command.

#!pwsh

Connect-AzAccount

#!markdown

- Set the default subscription using Azure PowerShell.

```shell
$subscriptionId = "<Subscription Id>"
Set-AzContext -SubscriptionId $subscriptionId
```

#!pwsh

$subscriptionId = "<Subscription Id>"
Set-AzContext -SubscriptionId $subscriptionId

#!markdown

- Ensure that you have selected the correct subscription you want to deploy ArcBox to by using the ```az account list --query "[?isDefault]"``` command. If you need to adjust the active subscription used by Az CLI, follow [this guidance](https://docs.microsoft.com/cli/azure/manage-azure-subscriptions-azure-cli#change-the-active-subscription).

- ArcBox must be deployed to one of the following regions. **Deploying ArcBox outside of these regions may result in unexpected results or deployment errors.**

  - East US
  - East US 2
  - Central US
  - West US 2
  - North Europe
  - West Europe
  - France Central
  - UK South
  - Australia East
  - Japan East
  - Korea Central
  - Southeast Asia

- **ArcBox requires 16 DSv4-series vCPUs** when deploying with default parameters such as VM series/size. Ensure you have sufficient vCPU quota available in your Azure subscription and the region where you plan to deploy ArcBox. You can use the below Az CLI command to check your vCPU utilization.

#!pwsh

az vm list-usage --location <your location> --output table

#!markdown

  ![Screenshot showing az vm list-usage](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/azvmlistusage.png)

- Register necessary Azure resource providers by running the following commands.

#!pwsh

az provider register --namespace Microsoft.HybridCompute --wait
az provider register --namespace Microsoft.GuestConfiguration --wait
az provider register --namespace Microsoft.AzureArcData --wait
az provider register --namespace Microsoft.OperationsManagement --wait
az provider register --namespace Microsoft.SecurityInsights --wait

#!markdown

- Create Azure service principal (SP). To deploy ArcBox, an Azure service principal assigned with the _Owner_ Role-based access control (RBAC) role is required.

- Create service principal using by running the following commands:

#!pwsh

$subscriptionId = "<Your Subscription Id>"
$servicePrincipalName = "<Unique Service principal name>"

Set-AzContext -SubscriptionId $subscriptionId
$spn = New-AzADServicePrincipal -DisplayName $servicePrincipalName -Role "Owner" -Scope "/subscriptions/$subscriptionId"
echo "SPN App id: $($spn.AppId)"
echo "SPN secret: $($spn.PasswordCredentials.SecretText)"

#!markdown

For example:

    ```PowerShell
    $account = Connect-AzAccount
    $subscriptionId = "98471a83-9151-489e-uub1-463447bed604"
    $servicePrincipalName = "JumpstartArcBoxSPN"

    Set-AzContext -SubscriptionId $subscriptionId
    $spn = New-AzADServicePrincipal -DisplayName $servicePrincipalName -Role "Owner" -Scope "/subscriptions/$subscriptionId"
    echo "SPN App id: $($spn.AppId)"
    echo "SPN secret: $($spn.PasswordCredentials.SecretText)"
    ```

    Output should look similar to this:

    ![Screenshot showing creating an SPN with PowerShell](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/create_spn_powershell.png)

    > **NOTE: If you create multiple subsequent role assignments on the same service principal, your client secret (password) will be destroyed and recreated each time. Therefore, make sure you grab the correct password.**

    > **NOTE: The Jumpstart scenarios are designed with as much ease of use in-mind and adhering to security-related best practices whenever possible. It is optional but highly recommended to scope the service principal to a specific [Azure subscription and resource group](https://docs.microsoft.com/cli/azure/ad/sp?view=azure-cli-latest) as well considering using a [less privileged service principal account](https://docs.microsoft.com/azure/role-based-access-control/best-practices)**

### Deployment

#### Deployment Option 1: Azure portal

- Click the <a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fsebassem%2Fazure_arc%2Farc_servers_level_up%2Fazure_jumpstart_arcbox_servers_levelup%2FARM%2Fazuredeploy.json" target="_blank"><img src="https://aka.ms/deploytoazurebutton"/></a> button and enter values for the the ARM template parameters.

  ![Screenshot showing Azure portal deployment of ArcBox](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portaldeploy.png)

  ![Screenshot showing Azure portal deployment of ArcBox](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portaldeployinprogress.png)

  ![Screenshot showing Azure portal deployment of ArcBox](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portaldeploymentcomplete.png)

    > **NOTE: The deployment takes around 20 minutes to complete.**

    > **NOTE: If you see any failure in the deployment, please check the [troubleshooting guide](https://azurearcjumpstart.io/azure_jumpstart_arcbox/itpro/#basic-troubleshooting).**

### Deployment Option 2: Bicep deployment via Azure CLI

- Clone the Azure Arc Jumpstart repository

#!pwsh

$folderPath = <Specify a folder path to clone the repo>

Set-Location -Path $folderPath
git clone -b arc_servers_level_up https://github.com/sebassem/azure_arc.git
Set-Location -Path "azure_arc\azure_jumpstart_arcbox_servers_levelup\bicep"

#!markdown

- Upgrade to latest Bicep version

#!pwsh

az bicep upgrade

#!markdown

- Edit the [main.parameters.json](https://github.com/sebassem/azure_arc/blob/arc_servers_level_up/azure_jumpstart_arcbox_servers_levelup/bicep/main.parameters.json) template parameters file and supply some values for your environment.
  - _`spnClientId`_ - Your Azure service principal id
  - _`spnClientSecret`_ - Your Azure service principal secret
  - _`spnTenantId`_ - Your Azure tenant id
  - _`windowsAdminUsername`_ - Client Windows VM Administrator name
  - _`windowsAdminPassword`_ - Client Windows VM Password. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long.
  - _`logAnalyticsWorkspaceName`_ - Unique name for the ArcBox Log Analytics workspace
  - _`emailAddress`_ - Your email address, to configure alerts for the monitoring action group

  ![Screenshot showing example parameters](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/parameters_bicep.png)

- Now you will deploy the Bicep file. Navigate to the local cloned [deployment folder](https://github.com/microsoft/azure_arc/tree/main/azure_jumpstart_arcbox/bicep) and run the below command:

#!pwsh

$resourceGroupName = "<resource-group-name>"
$location = "<preferred-location>"

az group create --name $resourceGroupName --location $location
az deployment group create -g $resourceGroupName -f "main.bicep" -p "main.parameters.json"

#!markdown

    > **NOTE: If you see any failure in the deployment, please check the [troubleshooting guide](https://azurearcjumpstart.io/azure_jumpstart_arcbox/itpro/#basic-troubleshooting).**

    > **NOTE: The deployment takes around 20 minutes to complete.**

### Connecting to the ArcBox Client virtual machine

Various options are available to connect to _ArcBox-Client_ VM, depending on the parameters you supplied during deployment.

- [RDP](https://azurearcjumpstart.io/azure_jumpstart_arcbox/ITPro/#connecting-directly-with-rdp) - available after configuring access to port 3389 on the _ArcBox-NSG_, or by enabling [Just-in-Time access (JIT)](https://azurearcjumpstart.io/azure_jumpstart_arcbox/ITPro/#connect-using-just-in-time-accessjit).
- [Azure Bastion](https://azurearcjumpstart.io/azure_jumpstart_arcbox/ITPro/#connect-using-azure-bastion) - available if ```true``` was the value of your _`deployBastion`_ parameter during deployment.

#### Connecting directly with RDP

By design, ArcBox does not open port 3389 on the network security group. Therefore, you must create an NSG rule to allow inbound 3389.

- Open the _ArcBox-NSG_ resource in Azure portal and click "Add" to add a new rule.

  ![Screenshot showing ArcBox-Client NSG with blocked RDP](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/rdp_nsg_blocked.png)

  ![Screenshot showing adding a new inbound security rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/nsg_add_rule.png)

- Specify the IP address that you will be connecting from and select RDP as the service with "Allow" set as the action. You can retrieve your public IP address by accessing [https://icanhazip.com](https://icanhazip.com) or [https://whatismyip.com](https://whatismyip.com).

  <img src="./nsg_add_rdp_rule.png" alt="Screenshot showing adding a new allow RDP inbound security rule" width="400">

  ![Screenshot showing all inbound security rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/rdp_nsg_all_rules.png)

  ![Screenshot showing connecting to the VM using RDP](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/rdp_connect.png)

#### Connect using Azure Bastion

- If you have chosen to deploy Azure Bastion in your deployment, use it to connect to the VM.

  ![Screenshot showing connecting to the VM using Bastion](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/bastion_connect.png)

  > **NOTE: When using Azure Bastion, the desktop background image is not visible. Therefore some screenshots in this guide may not exactly match your experience if you are connecting to _ArcBox-Client_ with Azure Bastion.**

#### Connect using just-in-time access (JIT)

If you already have [Microsoft Defender for Cloud](https://docs.microsoft.com/azure/defender-for-cloud/just-in-time-access-usage?tabs=jit-config-asc%2Cjit-request-asc) enabled on your subscription and would like to use JIT to access the Client VM, use the following steps:

- In the Client VM configuration pane, enable just-in-time. This will enable the default settings.

  ![Screenshot showing the Microsoft Defender for cloud portal, allowing RDP on the client VM](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/jit_configure.png)

  ![Screenshot showing connecting to the VM using RDP](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/rdp_connect.png)

  ![Screenshot showing connecting to the VM using JIT](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/jit_connect_rdp.png)

#### The Logon scripts

- Once you log into the _ArcBox-Client_ VM, multiple automated scripts will open and start running. These scripts usually take 10-20 minutes to finish, and once completed, the script windows will close automatically. At this point, the deployment is complete.

  ![Screenshot showing ArcBox-Client](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/automation.png)

- Deployment is complete! Let's begin exploring the features of Azure Arc-enabled servers with the Level-up modules.

  ![Screenshot showing complete deployment](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/arcbox_complete.png)

  ![Screenshot showing ArcBox resources in Azure portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/rg_arc.png)

#!markdown

## Modules

### Module 1: On-boarding to Azure Arc-enabled servers

#### Module overview: In this module we will connect two machines (Windows and Linux) to Azure Arc.

#### Task 1: Examine the existing Arc-connected machines.

- The deployment process that you have walked through should have set up four VMs running on Hyper-V in the ArcBox-Client machine. Two of these machines have been connected to Azure Arc already. Let us have a look at these in the Azure Portal

- Enter "Machines - Azure Arc" in the top search bar in the Azure portal and select it from the displayed services.

    ![Screenshot showing how to display Arc connected servers in portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/Arc_servers_search.png)

- We should see the machines that are connected to Arc already: Arcbox-Ubuntu-01 and ArcBox-Win2K19.

    ![Screenshot showing existing Arc connected servers](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/First_view_of%20Arc_connected.png) 

 - We want to connect the other 2 machines running as VMs in the ArcBox-Client. We can see these (ArcBox-Win2K22 and ArcBox-Ubuntu-02) by running the Hyper-V Manager in the ArcBox-Client (after we have connected to it with RDP as explained earlier in the setup).

    ![Screenshot of 4 machines on Hyper-v](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/choose_Hyper-V.png)

#### Task 2: Onboard a Windows machine to Azure Arc


- We will onboard the Windows machine ArcBox-Win2K22 using the [Service Principal onboarding method](https://learn.microsoft.com/azure/azure-arc/servers/onboard-service-principal).

- Using the following Powershell commands create a service principal and assign it the Azure Connected Machine Onboarding role for the selected subscription. After the service principal is created, it will print the application ID and secret (copy these somewhere safe for later use):

#!pwsh

$sp = New-AzADServicePrincipal -DisplayName "Arc server onboarding account" -Role "Azure Connected Machine Onboarding"
$sp | Format-Table AppId, @{ Name = "Secret"; Expression = { $_.PasswordCredentials.SecretText }}

#!markdown

- Next we will generate a script to automate the download and installation, and to connect to Azure Arc. 


- From the Azure portal go to the "Machines - Azure Arc" page and select "Add/Create" at the upper left, then select "Add a machine".

    ![Screenshot to select add a machine](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/Select_Add_a_machine.png)

- In the next screen, go to "Add multiple severs" and click on "Generate script".

    ![Screenshot Add Multiple Servers Script](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/Add_multiple_servers_script.png)

- Fill in the Resource Group, Region, Operating System (Windows), keep Connectivity as "Public endpoint" and in the Authentication box select the onboarding service principal that you created in this task. Then download the script to your local machine (or you can copy the content into the clipboard). 

- Go to the ArcBox-Client machine via RDP and from Hyper-V manager right-click on the ArcBox-Win2K22 VM and click "Connect" (Administrator default password is ArcDemo123!!). Then start Windows Powershell ISE in the ArcBox-Win2K22 VM and copy the content of the onboarding script in the Script Pane.

- Fill in the Service Principal secret in the script and run it.

    ![Screenshot run onboard windows script](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/run_windows_onboard_sctipt.png)

- On successful completion a message is displayed to confirm the machine is connected to Azure Arc. We can also verify that our Windows machine is connected in the Azure portal (Machines - Azure Arc).

    ![Screenshot confirm win machine on-boarded](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/confirm_windows_machine_onboarding.png)

#### Task 3: Onboard a Linux machine to Azure Arc.


- We will now onboard the Linux vm ArcBox-Ubuntu-02 to Azure Arc using the same service principal method we used above for the Windows machine. We can use the same service principal we created above.

- From the Azure portal go to the "Machines - Azure Arc" page and select "Add/Create" at the upper left, then select "Add a machine".

- In the next screen, go to "Add multiple severs" and click on "Generate script".

- Fill in the required details but this time choose Linux for the Operating System box. Then download the script to your local machine (or you can copy the content into the clipboard).

- Add the client secret to the script using your editor. Also add the following 3 lines just below the last export statement (to allow onboarding of Azure linux machines):

 ```shell
 sudo ufw --force enable
 sudo ufw deny out from any to 169.254.169.254
 sudo ufw default allow incoming
 ```

- Go the the ArcBox-Client machine, and from the "Networking" tab on Hyper-v Manager find the IP address of the Linux machine.

    ![Screenshot IP address of second Ubuntu machine](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/IP_address_second_Linux_vm.png)

- SSH into the ArcBox-Ubuntu-02 machine using "Putty" or "Vscode".

    ![Screenshot connect with putty](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/putty.png)

- Enter the user name and password (defaults "arcdemo" and "ArcDemo123!!") and log-in to the Linux VM.

- create an empty onboarding script file using the nano editor, and paste the script content from your local machine.
```
nano onboardingscript.sh
```
- Save the file (Ctrl-O then Enter) and exit (Ctrl-X). Now you can run the script:

```
sudo bash ./onboardingscript.sh
```

- Wait for the script to finish successfully. A message should confirm that the machine is now Arc-connected. We can also verify that our Windows machine is connected in the Azure portal (Machines - Azure Arc).

    ![Screenshot Linux message confirm connection](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/Linux_%20message_confirm_connection.png)

### Module 2: Monitor your Azure Arc-enabled servers using Azure Monitor

#### Module overview

In this module, you will learn how to deploy the Azure Monitor agent to your Arc-enabled Windows and Linux machines, the dependency agent to your Arc-enabled Windows machines and enable the _VM Insights_ solution to start monitoring your machines using Azure Monitor, run queries on the Log analytics workspace and configure alerts.

#### Pre-requisites

- Make sure that the policy _Enable Azure Monitor for Hybrid VMs with AMA_ is not assigned or inherited on the subscription you will use for this level-up.

#### Task 1: Deploy Azure Monitor agents and VM Insights using Azure Policy

Azure Policy lets you set and enforce requirements for all new resources you create and resources you modify. VM insights policy initiatives, which are predefined sets of policies created for VM insights, install the agents required for VM insights and enable monitoring on all new virtual machines in your Azure environment.

- In the Azure portal, search for _Policy_.

    ![Screenshot showing searching for Policy in the azure portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portal_policy_search.png)

- Click on "Definitions" and search for the _(ArcBox) Deploy Azure Monitor on Arc-enabled Windows machines_ policy.

    ![Screenshot showing searching for the arcbox policies](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_arcbox.png)

- Click "Assign Initiative".

    ![Screenshot showing assigning the policy](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_assign.png)

- Select the right scope (management group, subscription and resource group) for the resource group where you deployed _ArcBox_.

    ![Screenshot showing assigning the policy to the right scope](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_scope.png)

- After validating the scope, click "Next" twice to navigate to the parameters tab.

    ![Screenshot showing assigning the policy initiative to the right scope](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_dcr_blank.png)

- To get the "Data Collection Rule" resource Id,  run the following CLI command

#!pwsh

$resourceGroupName = "<resource-group-name>"

az resource show --name "arcbox-ama-vmi-perfAndda-dcr" `
                 --resource-group $resourceGroupName `
                 --resource-type Microsoft.Insights/dataCollectionRules `
                 --query id `
                 --output tsv

#!markdown

- You can also find the "Data Collection Rule" resource Id from the Azure portal. Search for the _arcbox-ama-vmi-perfAndda-dcr_ data collection rule.

    ![Screenshot showing searching for data collection rules](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/dcr_search_portal.png)

    ![Screenshot showing getting the data collection rules resource Id](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/dcr_vm_insights.png)

    ![Screenshot showing getting the data collection rules resource Id](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/dcr_json_view.png)

    ![Screenshot showing getting the data collection rules resource Id](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/dcr_resource_id.png)

    ![Screenshot showing adding the data collection rules resource Id](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_create.png)

    > **NOTE:The policy will take 5-15 minutes to assess the current resources.**

- After the policy has reported compliance, create a remediation task to remediate existing machines.

    ![Screenshot showing the ama policy not compliant](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_non_compliant.png)

    ![Screenshot showing creating the remediation task](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_create_remediation.png)

    ![Screenshot showing creating the remediation task](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_remediate.png)

- Create one remediation task per policy definition in the initiative.

    ![Screenshot showing creating the remediation task](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_create_remediation_multiple.png)

- After all remediation tasks have completed. You should see the Azure Monitor agent extension and the dependency agent extension deployed to the Arc-enabled machines.

    ![Screenshot showing the remediation tasks successful](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/policy_monitor_windows_remediate_tasks.png)

    ![Screenshot showing the monitoring agents installed](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/machine_windows_ama_agents.png)

- Repeat the same steps in _Task 2_ to assign the Linux policy for data collection _(ArcBox) Deploy Azure Monitor on Arc-enabled Linux machines._

- After configuring the agents and VM insights using Azure Policy, it will take 10-25 minutes for the insights data to start showing up.

   ![Screenshot showing VM insights on the Windows Arc-enabled machine](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/machine_vm_insights.png)

   ![Screenshot showing VM insights on the Linux Arc-enabled machine](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/machine_vm_insights_linux.png)

#### Task 2: Configure data collection for logs and metrics

As part of the ArcBox automation, some alerts and workbooks have been created to demonstrate the different monitoring operations you can perform after onboarding the Arc-enabled machines. You will now configure some data collection rules to start sending the needed metrics and logs to the Log Analytics workspace.

- In the Azure portal, search for _Data Collection rules_.

    ![Screenshot showing searching for data collection rules](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/dcr_search_portal.png)

- Create a new data collection rule.

    ![Screenshot showing creating a new data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_create.png)

- Provide a name and select the same resource group where ArcBox is deployed. Make sure to select Windows as the operating system.

    ![Screenshot showing creating a new data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_basics.png)

- In the "Resources" tab, select the right resource group and the Arc-enabled servers onboarded.

    ![Screenshot showing adding resources to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_resources.png)

- Add a new "Performance Counters" data source, and make sure to select all the custom counters.

    ![Screenshot showing adding performance counters to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_counters.png)

- Add a new "Azure Monitor Logs" destination and select the log analytics workspace deployed in the ArcBox resource group and save.

    ![Screenshot showing adding performance counters to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_counters_destination.png)

- Add a new "Windows Event logs" data source.

    ![Screenshot showing adding log data source to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_windows_logs_source.png)

- Select _Critial_, _Error_, _Warning_ events in the Application and System logs and add the data source.

    ![Screenshot showing adding log data source to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_windows_logs_types.png)

- Save and create the data collection rule.

- Repeat the previous steps to create another Linux data collection rule.

    ![Screenshot showing creating a new linux data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_linux_basics.png)

    ![Screenshot showing adding resources to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_resources_linux.png)

    ![Screenshot showing adding logs to the data collection rule](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_dcr_logs_linux.png)

- After waiting for 5-10 minutes for the data collection rule to start collecting data, restart the servers in the Hyper-V manager on the _ArcBox-Client_ VM to trigger some new events.

    ![Screenshot showing restarting the vms in the hyper-v manager](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_hyperv_restart.png)

#### Task 3: View alerts and visualizations

> **NOTE: It might take some time for all visualizations to load properly**

- In Azure Monitor, click on _Alerts_. and select _Alert rules_

    ![Screenshot showing opening the alerts page](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_rules_open.png)

- Explore the alert rules crated for you.

    ![Screenshot showing opening one alert around processor time](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_rules_rules.png)

- Go back to Azure Monitor and click on _Workbooks_. There are three workbooks deployed for you.

    ![Screenshot showing deployed workbooks](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_workbooks_list.png)

    ![Screenshot showing alerts workbook](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_workbooks_alerts.png)

    ![Screenshot showing performance workbook](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_workbooks_perf.png.png)

    ![Screenshot showing events workbook](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/alerts_workbooks_events.png)

### Module 3: Secure your Azure Arc-enabled servers using Microsoft Defender for servers

#### Module overview

In this module, you will learn how to enable and leverage Microsoft Defender for Servers to secure your Azure Arc-enabled servers using capabilities like Defender for Endpoint, vulnerability assessment and threat detection via alerts.

#### Task 1: Pre-requisites

> **NOTE: In the previous module, you should have already deployed the Azure Monitor agent (AMA) to you Arc-enabled servers. If you have not deployed it, follow the following steps in module 2 to deploy it otherwise skip to task 2**

#### Task 2: Enable the Defender for Servers plan

- From the Azure home page, search for defender and select Microsoft Defender for Cloud.

    ![Screenshot showing searching for Defender for Cloud in the Azure Portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_search.png)

- If you already have Defender plans setup at your subscription level, you may find that Defender is already turned on for your Arc-enabled servers. However, if Defender is not enabled, select _Environment settings_ from the Management section on the left blade.

    ![Screenshot showing selecting the right subscription to enableDefender for Cloud in the Azure Portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_env_settings.png)

- Expand the Tenant Root Group, and then select your subscription.

- Enable the plan for servers, you can select either _Plan 1_ or _Plan 2_ for this exercise

    ![Screenshot showing enabling Defender for servers plan in the Azure Portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_servers_enable.png)

- Click on the settings option in the _Monitoring coverage_ and enable the following capabilities:
  - Vulnerability assessment for machines
  - Endpoint protection

    ![Screenshot showing configuring Defender for servers plan 1 in the Azure Portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_servers_settings.png)

- Click Save.

    ![Screenshot showing configuring Defender for servers plan 1 in the Azure Portal](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_save.png)

#### Task 3: Detect threats on your servers using alerts

- To simulate a malicious activity on the _Win2k22_ servers, rdp into the _ArcBox-Client_ VM
- Go to Start and type _PowerShell ISE_.
- Right-select and select Run as administrator.

    ![Screenshot showing opening cmd as administator](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/powershellISE_runas.png)

- Run the following command:

```shell
$remoteScriptFile = "$agentScript\testDefenderForServers.ps1"
$Win2k22vmName = "ArcBox-Win2K22"
$nestedWindowsUsername = "Administrator"
$nestedWindowsPassword = "ArcDemo123!!"
$secWindowsPassword = ConvertTo-SecureString $nestedWindowsPassword -AsPlainText -Force
$winCreds = New-Object System.Management.Automation.PSCredential ($nestedWindowsUsername, $secWindowsPassword)
$cmdExePath = "C:\Windows\System32\cmd.exe"
$cmdArguments = "/C `"$remoteScriptFile`""

Invoke-Command -VMName $Win2k22vmName -ScriptBlock { Start-Process -FilePath $Using:cmdExePath -ArgumentList $Using:cmdArguments } -Credential $winCreds
```

  ![Screenshot showing running the Defender alert trigger script in ISE](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/run_defender_alert_trigger.png)

- Navigate to the Security tab of the _Win2k22_ Arc-enabled server in the portal

    ![Screenshot showing the generated alert](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_alert.png)

  > **NOTE: You should already see an alert for the Win2k19 Arc-enabled server**

- You can also see the alerts from the _Defender for Cloud_ portal, in the _Security alerts_ pane.

    ![Screenshot showing the generated alert](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_alert_mdfc.png)

  > **NOTE: If you don't see the alerts, make sure to select the Information severity in the filters**

    ![Screenshot showing the generated alert filters](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_alert_filter.png)

#### Task 4: Enable vulnerability assessment

- After waiting for 30-45 minutes, you should start seeing recommendations for the Arc-enabled machines in the "Security" blade.

> **NOTE: It might take several hours before this recommendation start to appear**

- You should find the recommendation _Machines should have vulnerability findings resolved_ if the vulnerability assessment has been enabled automatically on the subscription.

    ![Screenshot showing defender recommendations](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_recommendation_vulnerabilities.png)

    ![Screenshot showing defender recommendations](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_vulnerabilities_list.png)

- If you do not see this recommendation, click on the _Machines should have a vulnerability assessment solution installed_

    ![Screenshot showing defender recommendations](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_recommendations.png)

- Click on the "Machines should have a vulnerability assessment solution" recommendation and click "fix"

    ![Screenshot showing fixing the recommendation](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_recommendation_fix.png)

    ![Screenshot showing fixing the recommendation](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_enable_vulnrability.png)

    ![Screenshot showing fixing the recommendation](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_recommendation_fix_resource.png)

    ![Screenshot showing fixing the recommendation](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/defenderForCloud_portal_recommendation_fix_success.png)

> **NOTE: The same steps can be applied to the Linux Arc-enabled machines**

### Module 4: Configure your Azure Arc-enabled servers using Azure Automanage machine configuration

#### Module overview

In this module, you will learn to create and assign a custom Automanage Machine Configuration to an Azure Arc-enabled Windows and Linux servers to create a local user and control installed roles and features.

#### Task 1 : Create Automanage Machine Configuration custom configurations for Windows

We will be using the ArcBox Client virtual machine for the configuration authoring.

- RDP into the _ArcBox-Client_ VM

- Open Visual Studio Code from the desktop shortcut.

- Create C:\ArcBox\MachineConfiguration.ps1, then paste and run the following commands to complete the steps for this task:

> **NOTE: To run each additional code snippet you paste in VSCode, highlight the code you need to run and press F8**

  ![Screenshot showing VSCode code execution](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/vscode_code_execution.png)

##### Custom configuration for Windows

- Initialize variables.

```PowerShell
$resourceGroupName = $env:resourceGroup
$location = $env:azureLocation
$spnClientId = $env:spnClientID
$spnClientSecret = $env:spnClientSecret
$spnTenantId = $env:spnTenantId
$Win2k19vmName = "ArcBox-Win2K19"
$Win2k22vmName = "ArcBox-Win2K22"

$SecurePassword = ConvertTo-SecureString -String $spnClientSecret -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $spnClientId, $SecurePassword
Connect-AzAccount -ServicePrincipal -TenantId $spnTenantId -Credential $Credential
```

- Install the needed PowerShell modules.

```PowerShell
Install-Module -Name Az.Accounts -Force -RequiredVersion 2.12.1
Install-Module -Name Az.PolicyInsights -Force -RequiredVersion 1.5.1
Install-Module -Name Az.Resources -Force -RequiredVersion 6.5.2
Install-Module -Name Az.Storage -Force -RequiredVersion 5.4.0
Install-Module -Name GuestConfiguration -Force -RequiredVersion 4.4.0
Install-Module -Name PSDesiredStateConfiguration -Force -RequiredVersion 2.0.5
Install-Module -Name PSDscResources -Force -RequiredVersion 2.12.0.0
```

- Run _Get-InstalledModule_ to validate that the modules have installed successfully.

The Azure PowerShell modules are used for:

- Publishing the package to Azure storage
- Creating a policy definition
- Publishing the policy
- Connecting to the Azure Arc-enabled servers

The GuestConfiguration module automates the process of creating custom content including:

- Creating a machine configuration content artifact (.zip)
- Validating the package meets requirements
- Installing the machine configuration agent locally for testing
- Validating the package can be used to audit settings in a machine
- Validating the package can be used to configure settings in a machine

Desired State Configuration version 3 is removing the dependency on MOF.
Initially, there are only support for DSC Resources written as PowerShell classes.
Due to using MOF-based DSC resources for the Windows demo-configuration, we are using version 2.0.5.

- Create a storage account to store the machine configurations

```PowerShell
$storageaccountsuffix = -join ((97..122) | Get-Random -Count 5 | % {[char]$_})
New-AzStorageAccount -ResourceGroupName $resourceGroupName -Name "machineconfigstg$storageaccountsuffix" -SkuName 'Standard_LRS' -Location $Location -OutVariable storageaccount | New-AzStorageContainer -Name machineconfiguration -Permission Blob
```

- Create the custom configuration

```PowerShell
Import-Module PSDesiredStateConfiguration -RequiredVersion 2.0.5

Configuration AzureArcLevelUp_Windows
{
    param (
        [Parameter(Mandatory)]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]
        $PasswordCredential
    )

    Import-DscResource -ModuleName 'PSDscResources' -ModuleVersion 2.12.0.0

    Node localhost
    {
        MsiPackage PS7
        {
            ProductId = '{323AD147-6FC4-40CB-A810-2AADF26D868A}'
            Path = 'https://github.com/PowerShell/PowerShell/releases/download/v7.3.2/PowerShell-7.3.2-win-x64.msi'
            Ensure = 'Present'
        }
        User ArcBoxUser
        {
            UserName = 'arcboxuser1'
            FullName = 'ArcBox User 1'
            Password = $PasswordCredential
            Ensure = 'Present'
        }
        WindowsFeature SMB1 {
            Name = 'FS-SMB1'
            Ensure = 'Absent'
        }
    }
}

Write-Host "Creating credentials for arcbox user 1"
$nestedWindowsUsername = "arcboxuser1"
$nestedWindowsPassword = "ArcDemo123!!"  # In real-world scenarios this could be retrieved from an Azure Key Vault

# Create Windows credential object
$secWindowsPassword = ConvertTo-SecureString $nestedWindowsPassword -AsPlainText -Force
$winCreds = New-Object System.Management.Automation.PSCredential ($nestedWindowsUsername, $secWindowsPassword)

$ConfigurationData = @{
    AllNodes = @(
        @{
            NodeName = 'localhost'
            PSDscAllowPlainTextPassword = $true
        }
    )
}

$OutputPath = "$HOME/arc_automanage_machine_configuration_custom_windows"
New-Item $OutputPath -Force -ItemType Directory
```

- Execute the newly created configuration.

```PowerShell
AzureArcLevelUp_Windows -PasswordCredential $winCreds -ConfigurationData $ConfigurationData -OutputPath $OutputPath
```

- Create a package that will audit and apply the configuration (Set)

```PowerShell
New-GuestConfigurationPackage `
-Name 'AzureArcLevelUp_Windows' `
-Configuration "$OutputPath/localhost.mof" `
-Type AuditAndSet `
-Path $OutputPath `
-Force
```

- Test applying the configuration to the local machine

```PowerShell
Start-GuestConfigurationPackageRemediation -Path "$OutputPath/AzureArcLevelUp_Windows.zip"
```

- Upload the configuration package to the Azure Storage Account.

```PowerShell
$StorageAccount = Get-AzStorageAccount -Name "machineconfigstg$storageaccountsuffix" -ResourceGroupName $ResourceGroupName

$StorageAccountKey = Get-AzStorageAccountKey -Name $storageaccount.StorageAccountName -ResourceGroupName $storageaccount.ResourceGroupName
$Context = New-AzStorageContext -StorageAccountName $storageaccount.StorageAccountName -StorageAccountKey $StorageAccountKey[0].Value

Set-AzStorageBlobContent -Container "machineconfiguration" -File  "$OutputPath/AzureArcLevelUp_Windows.zip" -Blob "AzureArcLevelUp_Windows.zip" -Context $Context -Force

$contenturi = New-AzStorageBlobSASToken -Context $Context -FullUri -Container machineconfiguration -Blob "AzureArcLevelUp_Windows.zip" -Permission r
```

- Create an Azure Policy definition.

```PowerShell
$PolicyId = (New-Guid).Guid

New-GuestConfigurationPolicy `
  -PolicyId $PolicyId `
  -ContentUri $ContentUri `
  -DisplayName '(AzureArcJumpstart) [Windows] Custom configuration' `
  -Description 'Azure Arc Jumpstart Windows demo configuration' `
  -Path  $OutputPath `
  -Platform 'Windows' `
  -PolicyVersion 1.0.0 `
  -Mode ApplyAndAutoCorrect `
  -Verbose -OutVariable Policy

  $PolicyParameterObject = @{'IncludeArcMachines'='true'}

  New-AzPolicyDefinition -Name '(AzureArcJumpstart) [Windows] Custom configuration' -Policy $Policy.Path -OutVariable PolicyDefinition
```

- Assign the Azure Policy definition to the target resource group.

```PowerShell
$ResourceGroup = Get-AzResourceGroup -Name $ResourceGroupName

New-AzPolicyAssignment -Name '(AzureArcJumpstart) [Windows] Custom configuration' -PolicyDefinition $PolicyDefinition[0] -Scope $ResourceGroup.ResourceId -PolicyParameterObject $PolicyParameterObject -IdentityType SystemAssigned -Location $Location -DisplayName '(AzureArcJumpstart) [Windows] Custom configuration' -OutVariable PolicyAssignment
```

- In order for the newly assigned policy to remediate existing resources, the policy must be assigned a managed identity and a policy remediation must be performed.

```PowerShell
$PolicyAssignment = Get-AzPolicyAssignment -PolicyDefinitionId $PolicyDefinition.PolicyDefinitionId | Where-Object Name -eq '(AzureArcJumpstart) [Windows] Custom configuration'

$roleDefinitionIds =  $PolicyDefinition.Properties.policyRule.then.details.roleDefinitionIds

# Wait for eventual consistency
Start-Sleep 20

if ($roleDefinitionIds.Count -gt 0)
 {
     $roleDefinitionIds | ForEach-Object {
         $roleDefId = $_.Split("/") | Select-Object -Last 1
         New-AzRoleAssignment -Scope $resourceGroup.ResourceId -ObjectId $PolicyAssignment.Identity.PrincipalId -RoleDefinitionId $roleDefId
     }
 }

 $job = Start-AzPolicyRemediation -AsJob -Name ($PolicyAssignment.PolicyAssignmentId -split '/')[-1] -PolicyAssignmentId $PolicyAssignment.PolicyAssignmentId -ResourceGroupName $ResourceGroup.ResourceGroupName -ResourceDiscoveryMode ReEvaluateCompliance
```

- To check policy compliance, in the Azure Portal, navigate to *Policy* -> *Compliance*

- Set the scope to the resource group your instance of ArcBox is deployed to

- Filter for *(AzureArcJumpstart) [Windows] Custom configuration*

    ![Screenshot of Azure Portal showing Azure Policy compliance](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portal_policy_compliance.png)

> **NOTE: It may take 15-20 minutes for the policy remediation to be completed.**

- To get a Machine Configuration status for a specific machine, navigate to *Azure Arc* -> *Machines*

- Click on ArcBox-Win2K22 -> Machine Configuration

- If the status for *ArcBox-Win2K22/AzureArcLevelUp_Windows* is not *Compliant*, wait a few more minutes and click *Refresh*

    ![Screenshot of Azure Portal showing Azure Machine Configuration compliance](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portal_machine_config_compliance.png)

- Click on *ArcBox-Win2K22/AzureArcLevelUp_Windows* to get a per-resource view of the compliance state in the assigned configuration

    ![Screenshot of Azure Portal showing Azure Machine Configuration compliance detailed view](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/portal_machine_config_configs.png)

##### Verify that the operating system level settings are in place

- To verify that the operating system level settings are in place, run the following commands:

```powershell
 Invoke-Command -VMName $Win2k19vmName -ScriptBlock { Get-LocalUser -Name arcboxuser1 } -Credential $winCreds

 Invoke-Command -VMName $Win2k19vmName -ScriptBlock {  Get-WindowsFeature -Name FS-SMB1 | select  DisplayName,Installed,InstallState} -Credential $winCreds
```

  ![Screenshot of VScode showing Azure Machine Configuration validation on Windows](https://raw.githubusercontent.com/sebassem/azure_arc/arc_servers_level_up/docs/azure_arc_jumpstart/azure_arc_servers/levelup/vscode_win_machine_config_validation.png)

#!markdown

#### Task 2

### Module 5: Monitor changes to your Azure Arc-enabled servers using Change tracking and inventory

#### Module overview

#### Task 1

#### Task 2
